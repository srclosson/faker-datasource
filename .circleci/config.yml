aliases:
    # Workflow filters
    - &filter-only-master
      branches:
        only: master

defaults: &defaults
    working_directory: ~/plugin
    docker:
        - image: circleci/node:12.13-buster

version: 2
jobs:
    build_plugin:
        <<: *defaults
        steps:
            - checkout
            - restore_cache:
                name: Restore Yarn Package Cache
                keys: 
                    - yarn-packages-{{ checksum "yarn.lock" }}
            - run:
                name: Pull Packages
                command: yarn install --pure-lockfile
            - run:
                name: Prepare directory for build
                command: |
                    if [ ! -d 'ci' ]; then
                        mkdir -pv ci/jobs/build_plugin/dist
                    fi

                    #
                    # copy external libraries
                    #
                    [ -d 'src/lib' ] && cp -r src/lib ci/jobs/build_plugin/dist
                
                    #
                    # copy dashboards
                    #
                    if [ -d 'src/dashboards' ]; then
                        cp -r src/dashboards ci/jobs/build_plugin/dist
                    fi
            - run:
                name: Run Toolkit Build
                command: npx grafana-toolkit plugin:ci-build
            - save_cache:
                name: Save Yarn Package Cache
                paths: [ node_modules ]
                key: yarn-packages-{{ checksum "yarn.lock" }}
            - persist_to_workspace:
                root: .
                paths: 
                    - ci

    package:
        <<: *defaults
        steps:
            - checkout
            - attach_workspace:
                at: .
            - restore_cache:
                keys: 
                    - yarn-packages-{{ checksum "yarn.lock" }}
            - run:
                name: Package Distribution
                command: |
                    #
                    # Perform the build using toolkit
                    #
                    npx grafana-toolkit plugin:ci-package
            - persist_to_workspace:
                root: .
                paths:
                    - ci/jobs/package
                    - ci/packages
                    - ci/dist
                    - ci/grafana-test-env
    build_docs:
        <<: *defaults
        steps:
            - checkout
            - restore_cache:
                keys: [ "yarn-packages-{{ checksum \"yarn.lock\" }}" ]
            - run:
                name: Install yarn
                command: |
                    sudo npm install -g yarn --quiet
                    yarn install --pure-lockfile
                    mkdir ci # Avoid error if not exists
            - run:
                name: Build Docs
                command: npx grafana-toolkit plugin:ci-docs
            - save_cache:
                paths:
                    - node_modules
                key: yarn-packages-{{ checksum "yarn.lock" }}
            - persist_to_workspace:
                root: .
                paths:
                    - ci
    test_integration:
        <<: *defaults
        docker:
            - image: circleci/node:10-browsers
        steps:
            - checkout
            - attach_workspace:
                at: .
            - restore_cache:
                keys:
                - yarn-packages-{{ checksum "yarn.lock" }}
            - run:
                name: Setup Grafana (local install)
                command: |
                    wget https://dl.grafana.com/oss/release/grafana_6.5.1_amd64.deb
                    sudo apt-get install -y adduser libfontconfig1
                    sudo dpkg -i grafana_6.5.1_amd64.deb
                    sudo apt-get install locate
                    sudo updatedb
                    sudo locate grafana
                    sudo cat /etc/grafana/grafana.ini
                    sudo echo ------------------------
                    sudo cp ci/grafana-test-env/custom.ini /usr/share/grafana/conf/custom.ini
                    sudo cp ci/grafana-test-env/custom.ini /etc/grafana/grafana.ini
                    sudo service grafana-server start
                    sudo grafana-cli --version
            - run:
                name: Run e2e tests
                command: npx grafana-toolkit plugin:ci-test
            - persist_to_workspace:
                root: .
                paths: [ ci/jobs/test_integration ]
            - store_test_results:
                path: ci/jobs/test_integration
            - store_artifacts:
                path: ci/jobs/test_integration

    test_backend:
        <<: *defaults
        docker:
        - image: circleci/golang:1.13.5
        steps:
        - checkout
        - run:
            name: backend test
            command: |
                go test -covermode=count -coverprofile=count.out fmt ./...
                go test -v -coverpkg=./... --coverprofile=coverage.out ./...
                go test ./... -coverprofile cover.out; go tool cover -func cover.out

    publish-github-release:
        <<: *defaults
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints:
                    - "62:64:f0:20:b6:9a:90:97:1a:79:b8:d5:0c:14:ac:c8"
            - attach_workspace:
                at: .
            - run:
                name: "Publish Release on GitHub"
                command: |
                    npx grafana-toolkit plugin:github-publish --verbose
    report:
        <<: *defaults
        steps:
            - checkout
            - attach_workspace:
                at: .
            - restore_cache:
                keys:
                - yarn-packages-{{ checksum "yarn.lock" }}
            - run:
                name: Toolkit Report
                command: npx grafana-toolkit plugin:ci-report
            - store_artifacts:
                path: ci
workflows:
    version: 2
    plugin_workflow:
        jobs:
            - build_plugin
            - package:
                requires:
                    - build_plugin
            - test_integration:
                requires:
                    - package
            - report:
                requires:
                    - test_integration
            - approve_release:
                type: approval
                requires:
                    - report
                filters: *filter-only-master
            - publish_github_release:
                requires:
                    - approve_release
                filters: *filter-only-master
            - publish_to_s3:
                requires:
                    - publish_github_release
                filters: *filter-only-master